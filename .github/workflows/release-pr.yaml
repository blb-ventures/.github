---
name: Pre-Release

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      deployment-url:
        type: string
        required: true
      deployment-environment:
        type: string
        required: true
      deployment-projects:
        type: string
      docker-registry:
        type: string
        required: true
      back-image:
        type: string
        required: true
      front-image:
        type: string
        required: true
      argocd-app:
        type: string
    secrets:
      token:
        required: true
      sentry-url:
        required: true
      sentry-org:
        required: true
      sentry-token:
        required: true
      argocd-server:
        required: true
      argocd-token:
        required: true
      docker-username:
        required: true
      docker-password:
        required: true

concurrency:
  group: release-pr-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  get-version:
    name: Pre Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - id: version
        run: echo "version=v$(cat version.txt)" >> "$GITHUB_OUTPUT"
  generate-deployment:
    name: Generate Pre-Release Deployment
    runs-on: ubuntu-latest
    outputs:
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: chrnorm/deployment-action@releases/v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ secrets.token }}
          environment-url: ${{ inputs.deployment-url }}
          ref: ${{ github.sha }}
          environment: ${{ inputs.deployment-environment }}
  build-back:
    name: Build back
    runs-on: ubuntu-latest
    needs:
      - get-version
      - generate-deployment
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
    env:
      RELEASE_NAME: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: backend
          pull: true
          push: true
          build-args: |
            SENTRY_RELEASE=${{ env.RELEASE_NAME }}
            SENTRY_TOKEN=${{ secrets.sentry-token }}
          tags: |
            ${{ inputs.docker-registry }}/${{ inputs.back-image }}:${{ env.RELEASE_NAME }}
            ${{ inputs.docker-registry }}/${{ inputs.back-image }}:latest
          cache-from: >
            type=registry,ref=${{ inputs.docker-registry }}/${{ inputs.back-image }}:latest
          cache-to: type=inline
  build-front:
    name: Build front
    runs-on: ubuntu-latest
    needs:
      - get-version
      - generate-deployment
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}
    env:
      RELEASE_NAME: ${{ needs.get-version.outputs.version }}
      SENTRY_TOKEN: ${{ secrets.sentry-token }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.docker-registry }}
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: frontend
          pull: true
          push: true
          build-args: |
            SENTRY_RELEASE=${{ env.RELEASE_NAME }}
            SENTRY_TOKEN=${{ secrets.sentry-token }}
          tags: |
            ${{ inputs.docker-registry }}/${{ inputs.front-image }}:${{ env.RELEASE_NAME }}
            ${{ inputs.docker-registry }}/${{ inputs.front-image }}:latest
          # FIXME: Use registry cache when we can
          cache-from: type=gha
          cache-to: type=gha,mode=max
  pre-release:
    name: Pre Release
    runs-on: ubuntu-latest
    needs:
      - build-back
      - build-front
    if: ${{ !!inputs.argocd-app }}
    env:
      ARGOCD_SERVER: ${{ secrets.argocd-server }}
      ARGOCD_AUTH_TOKEN: ${{ secrets.argocd-token }}
    steps:
      - name: Setup argo
        run: |
          curl -sSL -o argocd "https://${{ env.ARGOCD_SERVER }}/download/argocd-linux-amd64"
          chmod +x argocd
      - name: Set staging release
        env:
          DOCKER_REGISTRY: ${{ inputs.docker-registry }}
          BACK_IMAGE: ${{ inputs.back-image }}
          FRONT_IMAGE: ${{ inputs.front-image }}
          ARGOCD_APP: ${{ inputs.argocd-app }}
        run: >
          ./argocd app set "${ARGOCD_APP}"
          --kustomize-image
          "${DOCKER_REGISTRY}/${BACK_IMAGE}@${{ needs.build-back.outputs.digest }}"
          --kustomize-image
          "${DOCKER_REGISTRY}/${FRONT_IMAGE}@${{ needs.build-front.outputs.digest }}"
  update-deployment:
    name: Update Deployment
    runs-on: ubuntu-latest
    needs:
      - pre-release
      - generate-deployment
      - get-version
    if: ${{ !!needs.generate-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v3
      - name: Update deployment status (success)
        if: ${{ needs.pre-release.result == 'success' }}
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ secrets.token }}
          state: success
          deployment-id: ${{ needs.generate-deployment.outputs.deployment_id }}
      - name: Create sentry release
        if: ${{ needs.pre-release.result == 'success' && inputs.deployment-projects }}
        uses: getsentry/action-release@v1
        env:
          RELEASE_NAME: ${{ needs.get-version.outputs.version }}
          SENTRY_URL: ${{ secrets.sentry-url }}
          SENTRY_ORG: ${{ secrets.sentry-org }}
          SENTRY_AUTH_TOKEN: ${{ secrets.sentry-token }}
        with:
          environment: ${{ inputs.deployment-environment }}
          version: ${{ env.RELEASE_NAME }}
          projects: ${{ inputs.deployment-projects }}
      - name: Update deployment status (failure)
        if: ${{ needs.pre-release.result != 'success' }}
        uses: chrnorm/deployment-status@releases/v2
        with:
          token: ${{ secrets.token }}
          state: failure
          deployment-id: ${{ needs.generate-deployment.outputs.deployment_id }}
